{"version":3,"sources":["components/screen/index.js","redux/actions/actions.js","redux/actions/types.js","utils.js","components/key/index.js","components/keyboard/index.js","components/depositBox/index.js","App.js","serviceWorker.js","redux/reducers/reducers.js","redux/store.js","index.js"],"names":["containerScreen","connect","store","passcode","screenStatusMessage","screenActive","deviceLocked","readScreenMessage","props","react_default","a","createElement","className","style","textAlign","fontSize","setScreenMessage","message","type","payload","setScreenActive","bool","lockDevice","setPasscode","pass","mess","setServiceMode","debounce","func","wait","immediate","timeout","context","this","args","arguments","callNow","clearTimeout","setTimeout","apply","API","SERIAL_NUMBER","containerKey","serviceMode","onClick","e","trimmedPasscodeToLastSixCharacters","concat","target","innerHTML","substring","length","debouncedHandler","debouncedHandlerIdleScreen","dispatch","handleClick","order","data","val","Keyboard","validateCode","code","axios","get","then","response","_this","handlePasscode","bind","Object","assertThisInitialized","handleIdleScreen","renderKeys","map","key","components_key","_this2","_this$props","savedPasscode","Component","containerKeyboard","DepositBox","state","screen","keyboard","App","depositBox","Boolean","window","location","hostname","match","initialState","createStore","undefined","action","objectSpread","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.367b6c18.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './style.scss';\r\n\r\nconst Screen = props => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={\r\n\t\t\t\tprops.screenActive\r\n\t\t\t\t\t? 'depositBox__screen active'\r\n\t\t\t\t\t: 'depositBox__screen inactive'\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t<div>{props.deviceLocked ? 'Locked' : 'Unlocked'}</div>\r\n\t\t\t<div style={{ textAlign: 'right', fontSize: '32px' }}>\r\n\t\t\t\t{props.readScreenMessage\r\n\t\t\t\t\t? props.screenStatusMessage\r\n\t\t\t\t\t: props.passcode}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n\treturn {\r\n\t\tpasscode: store.passcode,\r\n\t\tscreenStatusMessage: store.screenStatusMessage,\r\n\t\tscreenActive: store.screenActive,\r\n\t\tdeviceLocked: store.deviceLocked,\r\n\t\treadScreenMessage: store.readScreenMessage\r\n\t};\r\n};\r\n\r\nconst containerScreen = connect(mapStateToProps)(Screen);\r\nexport default containerScreen;\r\n","import {\r\n\tSCREEN_SET_MESSAGE,\r\n\tSCREEN_ACTIVE,\r\n\tDEVICE_LOCK,\r\n\tSET_PASSCODE,\r\n\tSAVE_PASSCODE,\r\n\tREAD_SCREEN_MESSAGE,\r\n\tSET_SERVICE_MODE\r\n} from './types.js';\r\n\r\nexport const setScreenMessage = message => {\r\n\treturn {\r\n\t\ttype: SCREEN_SET_MESSAGE,\r\n\t\tpayload: message\r\n\t};\r\n};\r\n\r\nexport const setScreenActive = bool => {\r\n\treturn {\r\n\t\ttype: SCREEN_ACTIVE,\r\n\t\tpayload: bool\r\n\t};\r\n};\r\n\r\nexport const lockDevice = bool => {\r\n\treturn {\r\n\t\ttype: DEVICE_LOCK,\r\n\t\tpayload: bool\r\n\t};\r\n};\r\n\r\nexport const setPasscode = pass => {\r\n\treturn {\r\n\t\ttype: SET_PASSCODE,\r\n\t\tpayload: pass\r\n\t};\r\n};\r\n\r\nexport const savePasscode = pass => {\r\n\treturn {\r\n\t\ttype: SAVE_PASSCODE,\r\n\t\tpayload: pass\r\n\t};\r\n};\r\n\r\nexport const readScreenMessage = mess => {\r\n\treturn {\r\n\t\ttype: READ_SCREEN_MESSAGE,\r\n\t\tpayload: mess\r\n\t};\r\n};\r\n\r\nexport const setServiceMode = bool => {\r\n\treturn {\r\n\t\ttype: SET_SERVICE_MODE,\r\n\t\tpayload: bool\r\n\t};\r\n};\r\n","export const SCREEN_SET_MESSAGE = 'SCREEN_SET_MESSAGE';\r\nexport const SCREEN_ACTIVE = 'SCREEN_ACTIVE';\r\nexport const SCREEN_IDLE = 'SCREEN_IDLE';\r\nexport const DEVICE_LOCK = 'DEVICE_LOCK';\r\nexport const SET_PASSCODE = 'SET_PASSCODE';\r\nexport const SAVE_PASSCODE = 'SAVE_PASSCODE';\r\nexport const READ_SCREEN_MESSAGE = 'READ_SCREEN_MESSAGE';\r\nexport const SET_SERVICE_MODE = 'SET_SERVICE_MODE';\r\n","export function debounce(func, wait, immediate) {\r\n\tvar timeout;\r\n\r\n\treturn function() {\r\n\t\tvar context = this,\r\n\t\t\targs = arguments;\r\n\t\tvar later = function() {\r\n\t\t\ttimeout = null;\r\n\t\t\tif (!immediate) func.apply(context, args);\r\n\t\t};\r\n\t\tvar callNow = immediate && !timeout;\r\n\t\tclearTimeout(timeout);\r\n\t\ttimeout = setTimeout(later, wait);\r\n\t\tif (callNow) func.apply(context, args);\r\n\t};\r\n}\r\n\r\nexport const API =\r\n\t'https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a?code=';\r\n\r\nexport const SERIAL_NUMBER = 4815162342;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setPasscode, setScreenActive } from '../../redux/actions/actions';\r\n\r\nimport './style.scss';\r\n\r\nlet Key = props => {\r\n\tconst handleClick = e => {\r\n\t\tconst { passcode, serviceMode } = props;\r\n\t\tlet trimmedPasscodeToLastSixCharacters = `${passcode}${\r\n\t\t\te.target.innerHTML\r\n\t\t}`;\r\n\t\ttrimmedPasscodeToLastSixCharacters = serviceMode\r\n\t\t\t? trimmedPasscodeToLastSixCharacters\r\n\t\t\t: trimmedPasscodeToLastSixCharacters.substring(\r\n\t\t\t\t\ttrimmedPasscodeToLastSixCharacters.length - 6,\r\n\t\t\t\t\ttrimmedPasscodeToLastSixCharacters.length\r\n\t\t\t  );\r\n\t\tprops.debouncedHandler();\r\n\t\tprops.debouncedHandlerIdleScreen();\r\n\t\tprops.dispatch(setScreenActive(true));\r\n\t\tprops.dispatch(setPasscode(trimmedPasscodeToLastSixCharacters));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<button\r\n\t\t\tonClick={e => handleClick(e)}\r\n\t\t\tclassName=\"depositBox__key\"\r\n\t\t\ttype=\"text\"\r\n\t\t\tstyle={{ order: props.data.order }}\r\n\t\t>\r\n\t\t\t{props.data.val}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nconst mapStateToProps = store => {\r\n\treturn {\r\n\t\tpasscode: store.passcode,\r\n\t\tserviceMode: store.serviceMode\r\n\t};\r\n};\r\n\r\nconst containerKey = connect(mapStateToProps)(Key);\r\n\r\nexport default containerKey;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport {\r\n\tsetScreenActive,\r\n\tsetScreenMessage,\r\n\tsavePasscode,\r\n\tlockDevice,\r\n\tsetPasscode,\r\n\treadScreenMessage,\r\n\tsetServiceMode\r\n} from '../../redux/actions/actions';\r\nimport { debounce, API, SERIAL_NUMBER } from '../../utils';\r\nimport Key from '../key';\r\n\r\nimport './style.scss';\r\n\r\nclass Keyboard extends Component {\r\n\tvalidateCode = code => {\r\n\t\taxios.get(`${API}${code}`).then(response => {\r\n\t\t\tif (response.data === SERIAL_NUMBER) {\r\n\t\t\t\tthis.props.dispatch(setScreenMessage('Unlocking'));\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.props.dispatch(setScreenMessage('Ready'));\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tthis.props.dispatch(readScreenMessage(false));\r\n\t\t\t\t\t}, 1500);\r\n\t\t\t\t\tthis.props.dispatch(lockDevice(false));\r\n\t\t\t\t\tthis.props.dispatch(setServiceMode(false));\r\n\t\t\t\t}, 3000);\r\n\t\t\t} else {\r\n\t\t\t\tthis.props.dispatch(setScreenMessage('Error'));\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.props.dispatch(readScreenMessage(false));\r\n\t\t\t\t}, 1500);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\thandlePasscode() {\r\n\t\tconst {\r\n\t\t\tsavedPasscode,\r\n\t\t\tdeviceLocked,\r\n\t\t\tpasscode,\r\n\t\t\tserviceMode\r\n\t\t} = this.props;\r\n\t\tthis.props.dispatch(setScreenActive(true));\r\n\t\tthis.props.dispatch(readScreenMessage(true));\r\n\r\n\t\tif (serviceMode) {\r\n\t\t\tthis.validateCode(passcode);\r\n\t\t\tthis.props.dispatch(setPasscode(''));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (deviceLocked) {\r\n\t\t\tif (passcode === '000000' && savedPasscode !== '000000') {\r\n\t\t\t\tthis.props.dispatch(setScreenMessage('Service'));\r\n\t\t\t\tthis.props.dispatch(setServiceMode(true));\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.props.dispatch(readScreenMessage(false));\r\n\t\t\t\t}, 1500);\r\n\t\t\t} else if (savedPasscode === passcode) {\r\n\t\t\t\tthis.props.dispatch(setScreenMessage('Unlocking'));\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.props.dispatch(setScreenMessage('Ready'));\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tthis.props.dispatch(readScreenMessage(false));\r\n\t\t\t\t\t}, 1500);\r\n\t\t\t\t\tthis.props.dispatch(lockDevice(false));\r\n\t\t\t\t}, 3000);\r\n\t\t\t} else {\r\n\t\t\t\tthis.props.dispatch(setScreenMessage('Error'));\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.props.dispatch(readScreenMessage(false));\r\n\t\t\t\t}, 1500);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (passcode.length === 6) {\r\n\t\t\t\tthis.props.dispatch(savePasscode(passcode));\r\n\t\t\t\tthis.props.dispatch(setScreenMessage('Locking'));\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.props.dispatch(lockDevice(true));\r\n\t\t\t\t\tthis.props.dispatch(setScreenMessage('Ready'));\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\tthis.props.dispatch(readScreenMessage(false));\r\n\t\t\t\t\t}, 1500);\r\n\t\t\t\t}, 3000);\r\n\t\t\t} else {\r\n\t\t\t\tthis.props.dispatch(setScreenMessage('Error'));\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.props.dispatch(readScreenMessage(false));\r\n\t\t\t\t}, 1500);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.props.dispatch(setPasscode(''));\r\n\t}\r\n\r\n\thandleIdleScreen() {\r\n\t\tthis.props.dispatch(setScreenActive(false));\r\n\t}\r\n\r\n\tdebouncedHandler = debounce(this.handlePasscode.bind(this), 1200);\r\n\tdebouncedHandlerIdleScreen = debounce(\r\n\t\tthis.handleIdleScreen.bind(this),\r\n\t\t5000\r\n\t);\r\n\r\n\trenderKeys = () => {\r\n\t\tconst keys = [\r\n\t\t\t{ val: '0', order: '5' },\r\n\t\t\t{ val: '1', order: '3' },\r\n\t\t\t{ val: '2', order: '3' },\r\n\t\t\t{ val: '3', order: '3' },\r\n\t\t\t{ val: '4', order: '2' },\r\n\t\t\t{ val: '5', order: '2' },\r\n\t\t\t{ val: '6', order: '2' },\r\n\t\t\t{ val: '7', order: '1' },\r\n\t\t\t{ val: '8', order: '1' },\r\n\t\t\t{ val: '9', order: '1' },\r\n\t\t\t{ val: '*', order: '4' },\r\n\t\t\t{ val: 'L', order: '6' }\r\n\t\t];\r\n\r\n\t\treturn keys.map(key => (\r\n\t\t\t<Key\r\n\t\t\t\tdebouncedHandler={this.debouncedHandler}\r\n\t\t\t\tdebouncedHandlerIdleScreen={this.debouncedHandlerIdleScreen}\r\n\t\t\t\tdata={key}\r\n\t\t\t\tkey={key.val}\r\n\t\t\t/>\r\n\t\t));\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn <div className=\"depositBox__keyboard\">{this.renderKeys()}</div>;\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n\treturn {\r\n\t\tpasscode: store.passcode,\r\n\t\tscreenStatusMessage: store.screenStatusMessage,\r\n\t\tsavedPasscode: store.savedPasscode,\r\n\t\tdeviceLocked: store.deviceLocked,\r\n\t\tserviceMode: store.serviceMode\r\n\t};\r\n};\r\n\r\nconst containerKeyboard = connect(mapStateToProps)(Keyboard);\r\n\r\nexport default containerKeyboard;\r\n","import React, { Component } from 'react';\r\nimport Screen from '../screen';\r\nimport Keyboard from '../keyboard';\r\n\r\nimport './style.scss';\r\n\r\nclass DepositBox extends Component {\r\n\tstate = {};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"depositBox\">\r\n\t\t\t\t<Screen />\r\n\t\t\t\t<Keyboard />\r\n\t\t\t\t<div className=\"depositBox__sn\">S/N: 4815162342</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DepositBox;\r\n","import React from 'react';\nimport DepositBox from './components/depositBox';\n\nimport './App.scss';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<DepositBox />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n\tSCREEN_SET_MESSAGE,\r\n\tSCREEN_ACTIVE,\r\n\tDEVICE_LOCK,\r\n\tSET_PASSCODE,\r\n\tSAVE_PASSCODE,\r\n\tREAD_SCREEN_MESSAGE,\r\n\tSET_SERVICE_MODE\r\n} from '../actions/types.js';\r\n\r\nconst initialState = {\r\n\tscreenStatusMessage: '',\r\n\tscreenActive: false,\r\n\tdeviceLocked: false,\r\n\tpasscode: '',\r\n\tsavedPasscode: '',\r\n\treadScreenMessage: false,\r\n\tserviceMode: false\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase SCREEN_SET_MESSAGE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tscreenStatusMessage: action.payload\r\n\t\t\t};\r\n\t\tcase SCREEN_ACTIVE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tscreenActive: action.payload\r\n\t\t\t};\r\n\t\tcase DEVICE_LOCK:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tdeviceLocked: action.payload\r\n\t\t\t};\r\n\t\tcase SET_PASSCODE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpasscode: `${action.payload}`\r\n\t\t\t};\r\n\t\tcase SAVE_PASSCODE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tsavedPasscode: `${action.payload}`\r\n\t\t\t};\r\n\t\tcase READ_SCREEN_MESSAGE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\treadScreenMessage: action.payload\r\n\t\t\t};\r\n\t\tcase SET_SERVICE_MODE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tserviceMode: action.payload\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { createStore } from 'redux';\r\nimport { reducer } from './reducers/reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}